/**
 * 模块在第一次加载后会被缓存。这也意味着多次调用require()不会导致模块中的代码被执行多次
 * 这种性质对内置模块、用户自定义模块和第三方模块都适用
 */

/**
 * 内置模块加载机制：
 *  内置模块是由Node.js官方提供的模块，其加载优先级最高
 */ 

/**
 * 用户自定义模块加载机制：
 *  - 使用require()加载自定义模块时，必须执行以./或../开头的路径标识符。在加载自定义模块时，如果没有
 *    指定./或../这样的路径标识符，则node会把它当做内置模块或第三方模块进行加载
 *  - 在使用require()导入自定义模块时，如果省略了文件的扩展名，则Node.js会按顺序分别尝试加载以下的文件：
 *      1. 按照确切的文件名进行加载
 *      2. 补全.js扩展名进行加载
 *      3. 补全.json扩展名进行加载
 *      4. 补全.node扩展名进行加载
 *      5. 加载失败，终端报错
 */

/**
 * 第三方模块加载机制：
 *  - 如果传递给require()的模块标识符不是一个内置模块，也没有以./或../开头，则Node.js会从当前模块所处的
 *    目录开始，尝试从/node_modules文件夹中加载第三方模块，如果没有找到对应的第三方模块，则移动到再上一
 *    层父目录中，进行加载，直到文件系统的根目录
 */

/**
 * 目录作为模块：
 *  当把目录作为模块标识符，传递给require()进行加载时，有三种加载方式：
 *      1. 在被加载的目录下查找一个package.json的文件，并寻找main属性，作为require()加载的入口
 *      2. 如果目录中没有package.json文件，或者main入口不存在或无法解析，则Node.js将会试图加载目录下的index.js文件
 *      3. 如果以上两步都失败了，则Node.js会在终端打印错误消息，报告模块的缺失：Error: Cannot find module 'xxx'
 */ 
